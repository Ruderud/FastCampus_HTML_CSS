/* 
float 라는 개념은 적용된 요소 주변으로 text가 흐르는
신문형태로 만들어준다

플롯은 언젠간 꼭 해제해야하는 요소로써, 그렇게하지않으면 요소가 겹치는등의 문제가 생기기 떄문임
플롯해제는 
1. clear을 쓸수있는데, 이거는 다음형제요소가 있어야만 사용할 수있다는 단점이있음
2. overflow도 사용할수 있음. hidden or auto라는 값을 사용하면 이다음 형제요소가없어도 그만하게할 수 있지만,
이는 전혀 관련없는 부모요소에 집어넣어서 사용하는 편법요소이므로 지양한다
3. clearfix라는 요소를 사용하는것이 가장 추천된다.
일단 부모요소의 클레스에 clearfix라는 말을 넣어주고,
css에서 clearix::after { content:""; clear:both; display:block(or table;}
을 입력하면 부모 클레스 밑의 자식클레스가 float을 다 쓰고나서 바깥으로 벗어나려고할떄 맨마지막에 추가된 ""요소에서 clearboth를 수행하여 
float을 끊어주는 메커니즘이다.


*/

article {

}
article .picture {
    width: 200px;
    height: 150px;
    background: tomato;
    float: left;
    margin-right: 10px;
    margin-bottom: 10px;
}
article .text {
    clear: left         /*해당 문장부터는 문장이 같이 흐르는것을 그만두게함*/
}

.box {
    width: 150px;
    height: 100px;
    background: tomato;
    color: thistle;
    font-size: 30px;
    margin: 10px;
    float: left;       /*좌측/우측정렬개념으로 생각하지말고, 맨 오른쪽부터 하나씩 순차적으로 쌓아나간다고 생각하자*/
}
.box4 {
    width: 200px;
    height: 150px;
    background: orange;
    clear: both;        /*이렇게 float값으로 인한 겹침을 해소할 수 있음 left,right요소로도 정리가능하나 both가 편함*/
}



.clearfix::after {      /*clearfix라는 클래스의 맨뒤에 공백 컨탠츠 ""를 할당하고 클리어 수행후, 디스플레이를 블록으로 설정하여 줄바꿈하게끔 만들었음*/
    content: "";
    clear:both;
    display: block;         
}
.float-box {        /*이떄 float요소가 있는 가족요소에는 float되지 않을 요소가 들어가지 않게끔 html에서 짜야한다!*/
    width: 100px;
    height: 100px;
    background: orange;
    margin: 10px;
    float: left;
}
.new-box {
    width: 200px;
    height: 200px;
    background: red;
}
span {
    width: 100px;
    height: 100px;
    margin: 10px;
    background: tomato;
    /*display: block -> 플롯으로 인해 자동으로 블록으로 변환된다!*/
    float: left;        /*수직에서 수평으로 쌓이게 되었음*/
}

/* 다만 flex와 inline-flex는 float의 속성이 적용된다고해도 block으로 바뀌지않는다 */

.parent {
    width: 400px;
    height: 300px;
    border: 4px dashed lightgray;
}
.child {
    width: 150px;
    height: 100px;
    background: tomato;
    border: 4px dashed red;
    border-radius: 10px;
    position: absolute;
    top: 1200px;        /*위에 다른예시들때문에 좀 많이 내렸음*/
    left: 50px;

}

/* 
position은 요소가 위치하는 방법을 요소로써 지정하고,
top/bottom/left/right속성으로 그 위치를 px,em,cm단위로 지정할 수 있다 
(포지션이 지정되어있을떄만 쓸 수 있음) 

position의 relative 요소는 원래 요소를 존재는 하지만 안보이게하고,
원래모습의 홀로그램을 배정한 상하좌우 값에따라 원래 위치에서 움직여서 보여준다

*/

.box1 {
    width: 100px;
    height: 100px;
    background: red;
    border : 4px dashed green;
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 30px;
}
.relative {
    position: relative;     /*배치기준을 원래의 자기 자신으로함. */
    top :20px;
    left: 150px;
}


/* 
absolute는 부모상의 요소를 기준으로한다.

*/

.grand-parent1 {
    width: 400px;
    height: 300px;
    padding: 30px 100px 100px 30px;
    border: 4px dashed lightgray;
    position: relative;     /*조상요소공간을 자식요소가 absolute로 존재할 수 있게끔 하는 기준위치를 삼음 */
}
.parent1 {
    width: 400px;
    height: 300px;
    border: 4px dashed gray;
    /* position: relative;     부모요소공간을 자식요소가 absolute로 존재할 수 있게끔 하는 기준위치를 삼음
    조상과 부모 둘다 relative가있다면 가까운 부모요소를 기준으로함*/
}
.child1 {
    width: 120px;
    height: 80px;
    background: tomato;
    border: 4px dashed red;
    font-size: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
}
.absolute {
    position: absolute; /*2번박스는 붕뜨고, 그밑에 3번박스가 와있는 상태로 만들었다*/
    bottom: 50px;
    right: 70px;        /*만약 부모요소에 relative요소가 없으면 body->html->브라우져(뷰포트)수준까지 올라가버린다
                            그래서 화면크기를 조정하면 화면에 따라오게만들어져버린다*/
}

/* 뷰포트에 컨탠츠를 고정시켜서 화면이 스크롤되어도 움직이지 않게하기 위해서는
position fixed를 써야함 */

.container {    /*컨테이너 박스안에서 타이틀1~8이 스티키움직임을 갖도록함*/
    width: 400px;
    height: 400px;
    border: 4px solid red;
    overflow: auto;
    margin: 50px;
}
.section {
    height: 200px;
    border: 4px dashed lightgray;
}
.section h1 {
    text-align: center;
    line-height: 2;
    font-weight: bold;
    font-size: 24px;
    position: sticky;       /*1번이 붙어서 내려오다가 2번에 의해 다밀리면 2번이 상단에 붙게되고, 이어서 3,4..순으로 위에 붙어서 내려오는 방식(보면안다)*/
    top:0;

}


.box-group {
    display: flex; /*가로로 나열*/
}
.box-group .boxx {
    width: 100px;
    height: 100px;
    background: tomato;
    border: 4px dashed red;
    border-radius: 10px;
    font-size: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: -30px;    /*박스끼리 겹치게*/
    box-shadow: 0 0 10px rgba(255, 0, 0, .7);
}
.box-group .boxx:nth-child(2n) {
    margin-top: 30px;

}
.boxx1 {
    position: relative;
    z-index: 2;
}
.boxx2 {
    position: relative;
    z-index: 3;
}
.boxx3 {
    position: relative; /*3번이 5번위*/
    z-index: 1;     /*가장윗층의 두번쨰!*/
}
.boxx4 {
    position: relative; /*4번박스가 제일 위에(가장 늦게 작성되었으므로)*/
    z-index: 1;     /*가장윗층의 첫번쨰!(동일층에서는 늦게쓸수록 위)*/
}
.boxx5 {
    
}

/* 
포지션도 
absolute, fixed 속성이 적용된 요소는 대부분 블록요소로 수정된다
-> flex, inline-flex는 float처럼 포지션효과적용이 안된다
(static, relative sticky들은 해당사항없음) 
*/
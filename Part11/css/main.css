div {
    color: red;
    font-size: 20px;
    font-style: 10px;
}

/* import는 css가 css를 불러오는 방식! -> 직렬호출(순차적) */
/* @import url("./쏼라쏼라") */

/*  선택자 종류 (숫자 순서대로 부모-자손 순으로 내려감)
1. 전체선택자
* 표시를 이용해서 전체를 선택할 수 있음 ex) * {} 
2. 태그선택자
태그이름을 불러와서 ex) div {} 
3. 클래스선택자
. 태그이름 ex) .head {} 
4. 아이디선택자
#아이디이름 ex) #myAge {} */

/* 복합선택자
<span>
    <li>a</li>
    <li>b</li>
    <li class="orange">c</li>
    <li>d</li>
    <li>e</li>
</span>


1. 일치선택자: span.orange (태그+클레스) 
-> span태그이면서 orange라는 이름의 클레스태그만 선택

2. 자식선택자: span > .orange 
-> span태그의 자식중에서, 클레스명이 orange인것들만 선택

3. 후손선택자: span .orange (띄어쓰기(' ')가 선택자 문자가 된다!) 
-> span 태그속에서 클레스이름을 orange로 히는 "모든"후손태그들을 선택
+같은 부모를 가지는 동일한 level의 태그는 형제태그라고 한다

4. 인접 형제 선택자: .orange + li {}
-> 오랜지 클래스의 부모태그를 부모로하는 형제태그중 "다음 태그"인 d를 선택

5. 일반 형제 선택지: .orange ~ li {}
-> 오랜지 클래스의 부모태그를 부모로하는 형제태그중 "다음 모든 태그"인 d, e를 선택
*/

a:hover {       /*마우스가 해당요소 위에올라가면 작동*/
    font-weight: bold;
    font-size: 20px;
}
.box {
    width: 100px;
    height: 100px;
    background: tomato;
    transition: 0.4s;       /*천천히 변화함*/
}
.box:hover{
    width: 200px;
}
.box:active {
    width: 200px;
    background: yellowgreen;
}
input {
    width: 100px;
    outline: none;
    border: 1px solid lightgray;
    padding: 5px 10px;  /*상하, 좌우*/
    transition: 0.4s;
}
input:focus {
    border-color: red;
    width: 200px;
}

.fruits li:first-child{     /*fruits라는 클레스의 후손중에서 첫번째 후손을 선택함 - 딸기가 빨간색*/
    color:red               
}
.fruits li:last-child{     /*fruits라는 클레스의 후손중에서 첫번째 후손을 선택함 - 망고가 주황색*/
    color:orange               
}
.fruits li:nth-child(2n) {      /*2배수 번째의 후손들을 선택함!*/
    color: green;
}
.fruits li:nth-child(n+3) {      /*3번째부터의 후손들을 선택함*/
    font-size: 20px ;
}
.fruits p:nth-child(1) {        /*역순으로 해석하는것이 정확! fruts의 자손중 첫번째가 p태그라면 파란색!*/
    color : blue;
}

.fruits :first-child {        /* :앞에 공란으로 놔두면 조건없이 모든 첫번째 자손을 선택하는것을 의미*/
    font-weight : 300;
}
.fruits li:nth-of-type(3) {     /* 후손중 li태그를 골라서, 그중 세번째 li를 선택*/
    color:purple;
}
.fruits li:not(.exp) {          /*exp클레스만 빼고 다 선택하게끔함*/
    font-size: 50px;
}


/* 가상 클레스선택자는 : 를,
가상 요소선택자는 :: 를 사용한다 */

.ten li::before {
    content: "";    /*빈칸이라도 설정을 해줘야 앞에 토마토색 원이 생기게된다! 없으면 아예 안뜸*/
    width: 30px;
    height: 30px;
    background: tomato;
    margin-right:  20px;
    display: inline-block;
    border-radius: 50%;
}
.ten li::after {
    content: url("https://heropy.blog/css/images/vendor_icons/css3.png");
    size: 10px;

}

[disabled] {    /*disabled라는 속성이 있는 태그를 선택*/
    opacity: 0.2;
    color: red;
}

[type=password] {   /*password라는 값을 가지는 type속성을태그를 선택*/
    opacity: 0.5;
    color: green;
}
[class^="btn-"] {   /*class의 값이 btn- 으로 시작하는 태그들을 선택*/
    font-weight: bold;
    border-radius: 20px;
}
[class$="s"] {  /*클레스의 값이 s로 끝나는것을 선택*/
    color: green;
}
[class$="d"] {
    color: hotpink;
}

/* css에서는 상속되는 속성이 정해져있는데, 대체로 글자를 다루는 속성들이 해당된다
그래서 상속되지 않는 요소를 상속시키기 위해서는 자식 클레스 {} 요소내에 "inherit"을 
value로 하여 작성할경우 그위의 부모값을 상속받게된다.
ex
.son {
    background : "inherit" ;
} */

/* css우선순위 결정
1. 명시도
2. 선언순서 (명시도 동점일떄)
3. 중요도   (상속은 중요도가 떨어짐)
+ !important가 적용된것은 가장 우선시된다
에 따라서 결정된다

점수
!important : 무한대pt
인라인 선언 : 1000pt
아이디 선택자 : 100pt
클레스 선택자 : 10pt        단, 부정선택자 :not은 0점으로 계산한다
태그 선택자 : 1pt
전체선택자(*) : 0pt
상속 : 점수계산에 해당x */
